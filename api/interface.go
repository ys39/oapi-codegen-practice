// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    *int    `json:"code,omitempty"`
	Detail  *string `json:"detail,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NotFoundResponse defines model for NotFoundResponse.
type NotFoundResponse struct {
	Code    *int    `json:"code,omitempty"`
	Detail  *string `json:"detail,omitempty"`
	Message *string `json:"message,omitempty"`
}

// PostCreateJSONBody defines parameters for PostCreate.
type PostCreateJSONBody struct {
	Content string `json:"content"`
	Title   string `json:"title"`
}

// GetListParams defines parameters for GetList.
type GetListParams struct {
	// Page ページ番号
	Page int `form:"page" json:"page"`

	// PerPage 1ページあたりの表示数
	PerPage int `form:"per_page" json:"per_page"`
}

// PutUpdateIdJSONBody defines parameters for PutUpdateId.
type PutUpdateIdJSONBody struct {
	Content string `json:"content"`
	Title   string `json:"title"`
}

// PostCreateJSONRequestBody defines body for PostCreate for application/json ContentType.
type PostCreateJSONRequestBody PostCreateJSONBody

// PutUpdateIdJSONRequestBody defines body for PutUpdateId for application/json ContentType.
type PutUpdateIdJSONRequestBody PutUpdateIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 投稿を作成する
	// (POST /create)
	PostCreate(c *gin.Context)
	// 投稿を削除する
	// (DELETE /delete/{id})
	DeleteDeleteId(c *gin.Context, id int)
	// 投稿の詳細を取得する
	// (GET /detail/{id})
	GetDetailId(c *gin.Context, id int)
	// 投稿一覧を取得する
	// (GET /list)
	GetList(c *gin.Context, params GetListParams)
	// 投稿を更新する
	// (PUT /update/{id})
	PutUpdateId(c *gin.Context, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostCreate operation middleware
func (siw *ServerInterfaceWrapper) PostCreate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCreate(c)
}

// DeleteDeleteId operation middleware
func (siw *ServerInterfaceWrapper) DeleteDeleteId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteDeleteId(c, id)
}

// GetDetailId operation middleware
func (siw *ServerInterfaceWrapper) GetDetailId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDetailId(c, id)
}

// GetList operation middleware
func (siw *ServerInterfaceWrapper) GetList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetListParams

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "per_page" -------------

	if paramValue := c.Query("per_page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument per_page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetList(c, params)
}

// PutUpdateId operation middleware
func (siw *ServerInterfaceWrapper) PutUpdateId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUpdateId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/create", wrapper.PostCreate)
	router.DELETE(options.BaseURL+"/delete/:id", wrapper.DeleteDeleteId)
	router.GET(options.BaseURL+"/detail/:id", wrapper.GetDetailId)
	router.GET(options.BaseURL+"/list", wrapper.GetList)
	router.PUT(options.BaseURL+"/update/:id", wrapper.PutUpdateId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXX0/cRhD/Kta2Ul4sbBIeIr+F0lYnVRVK2qcIVZvzwG109jq7a1KETop9bUOAKigS",
	"pCStaANNKJQrUpBK0n8fZvEdfItq13e+4+xLoG1QyQsyc57fzOzvNzPrWVSmXkB98AVHzizi5Qp4WD++",
	"zxhlV4EH1OegDAGjATBBQP9cpq62wufYC6qAnBHbNpGYCQA5iPgCpoChmolcEJhUj72JPqmAcYG4F4wA",
	"M+yBAGZ4IRfGDTCwEVBOBJkGow0yhDJYLhjxpxSqB5zjqeMJoJI/javENRjcCoGLLjrPQ9QyC71xE8pC",
	"gX5MxQc09N1TFT1ymqIDyoVxm4iKURozhi9eMm5jbvhUGJMq7skrvQqchqwMXd+TVKhMxJ+kCssFXmYk",
	"EIT6yEGjo9dktH208uTozrqMVmW8cGW8JKPGwW/LzWffKGwidODR0WvGlfESMtE0MJ46Dw/ZQ7ZKlQbg",
	"44AgB13SJhMFWFT0wVllBlikJ0q5yGfQXNmV0UMZfdGcX25t/iXjBwd/fNucW0qzQRqcYfVyyUUOGqdc",
	"vJdCmqjN9yh1Z1KSfAG+joGDoErK2s26yVWgjsSLuM3cciS0y58tOGMVnDBwkXO9/ZqZQU0UUtD1ECwE",
	"bUj1ptO4aA+/oSKI22PuEesriivIvo+2lK1osbmznuzvy2i7Q9uyjBdltJZ8v5cszakwI7Z9qsLeZTCJ",
	"HPSO1Z1QVns8WcdnU0FeyZc/JvOPZf2urP8uY5Xgwf7XzZ11GW11MqqZiIeeh9lMt46c6gSe4opZJVqO",
	"JpST5UIVBFizxK2lOlb/Fih68W7SeJQdRBYhuTd/tLoxQNdjGiz9W3J1B2UzzLneH6IXqsNEozSGVJsj",
	"R3cfMpGPPc24i/q1Z/Ycd78uahM5YdoFReb47+RUwP/If8Z/blK/SpqHTxdktCGjBRnfk9GWeojWe1Ir",
	"FkIfTcVCUFM+E8IUiJOqIGoc/vS8tber4txfSf58OEAOH4IY00Fer4Wz4v+8DKa5pWR+rbkay6gh6z/L",
	"+IWsfyfrz2X84tyJcbBailRZJel+LZZjB/Fg/87h02d9iDJak3Eko0a64nNa/EhBv0aHsv5Iz9z91vJW",
	"cv/XjhZvhcBmumIM1JXmVHI0+wMNZ5FkFOvM59VJ/bDZ2njZXN4dFBjYZ6cP/m97gQjw+Fk3RWbAjOGZ",
	"f9QkZ7ixs/0s61sy/kXGmzqd4pYoVO+AfggDF/es6yAUJ9/Vzcd7+mJafAcNxaca+wTDuQfnzQzqt+oG",
	"bJ/rG3CH7P/9Dfjc3cn62jHX7coL2PSgxbSjj2Jb1rePVhZaqy9bD3aTJ3VkopBVkYMqQgSOZVVpGVcr",
	"lAvnsn3ZtqaHLfVNm98/ejx91d5AambuFuBxx1LuQ+1P96Ey9TLEidrfAQAA//+gUi0HfhEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
